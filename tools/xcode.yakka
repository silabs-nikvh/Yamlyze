name: xcode toolchain

flags:
  c:
    global:
      - -Os
      - -MD
      - -ffunction-sections
      - -fdata-sections
      -  -arch arm64

  cpp:
    global:
      - -O3
      - -std=c++20
      - -MD
      - -ffunction-sections
      - -fdata-sections
      - -Werror -Wpedantic -Wall
      - -arch arm64

  ld:
    global:
      - -O3
      - -lpthread
      - -dead_strip
      - -arch arm64

tools:
  clang: clang++

blueprints:
  link:
    depends:
      - '{{project_output}}/{{project_name}}{{configuration.executable_extension}}'

  '{{project_output}}/{{project_name}}{{configuration.executable_extension}}':
    depends:
      - '[{% for name, component in components %}{%if existsIn(component,"sources") %}{% for source in component.sources %}{{project_output}}/components/{{name}}/{{source}}.o, {% endfor %}{% endif %}{% endfor %}]'
      - '{{project_output}}/{{project_name}}.global_ld_options'
    process:
      - clang: "@{{project_output}}/{{project_name}}.global_ld_options -o {{$(0)}}"

  object_files:
    regex: .+/components/([^/]*)/(.*)\.(cpp|c)\.o
    depends:
      - '{{project_output}}/components/{{$(1)}}/{{$(1)}}.{{$(3)}}_options'
      - '{{at(components, $(1)).directory}}/{{$(2)}}.{{$(3)}}'
      - '{{project_output}}/{{project_name}}.global_{{$(3)}}_options'
      - dependency_file: '{{at(components, $(1)).directory}}/{{$(2)}}.{{$(3)}}.d'
    process:
      - create_directory: '{{$(0)}}'
      - clang: "-c @{{project_output}}/{{project_name}}.global_{{$(3)}}_options @{{project_output}}/components/{{$(1)}}/{{$(1)}}.{{$(3)}}_options -o {{$(0)}} {{at(components, $(1)).directory}}/{{$(2)}}.{{$(3)}}"
  
  '{{project_output}}/{{project_name}}.global_ld_options':
    depends:
      - data:
          - '/*/flags/ld'
          - '/*/sources'
          - '/*/libraries'
    process:
      - inja: "{% for name,component in components %}{% for flag in component.flags.ld.global %}{{render(flag, component.directory)}} {% endfor %}{% for library in component.libraries %}-l{{render(library, component.directory)}} {% endfor %}{%endfor%} {% for name, component in components %}{%if existsIn(component,\"sources\") %}{% for source in component.sources %}{{project_output}}/components/{{name}}/{{source}}.o {% endfor %}{% endif %}{% endfor %}"
      - save: 
    
  global_compiler_options:
    regex: '{{project_output}}/{{project_name}}.global_(cpp|c)_options'
    depends:
      - data:
          - '/*/flags/{{$(1)}}/global'
          - '/*/includes/global'
          - '/*/defines/global'
    process:
      - inja: "{% for name,component in components %}
        {% if existsIn(component, \"flags\") and existsIn(component.flags, $(1)) %}{% for flag in at(component.flags, $(1)).global %}{{flag}} {% endfor %}{%endif%}
        {%- for include in component.includes.global %}-I{{component.directory}}/{{include}} {% endfor %}
        {%- for define in component.defines.global %}-D{{define}} {% endfor %}
        {%endfor%}
        {%- for feature in features %}-D{{feature}}_FEATURE_REQUIRED {% endfor %}
        -I{{project_output}}"
      - save: 
      
  compiler_option_files:
    regex: '.+/components/([^/]*)/\1\.(cpp|c)_options'
    depends:
      - data:
          - '/{{$(1)}}/flags/{{$(2)}}/local'
          - '/{{$(1)}}/includes/local'
          - '/{{$(1)}}/defines/local'
    process:
      - create_directory: '{{$(0)}}'
      - inja: "{% set component=at(components,$(1)) %}
        {% if existsIn(component, \"flags\")%}{% for flag in at(component.flags, $(2)).local %}{{flag}} {% endfor %}{%endif%}
        {% for include in component.includes.local %}-I{{component.directory}}/{{include}} {% endfor %}
        {% for define in component.defines.local %}-D{{define}} {% endfor %}"
      - save:
