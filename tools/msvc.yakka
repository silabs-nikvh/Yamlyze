name: Microsoft Visual C compiler

tooling:
  build_tool_path: "C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools/VC/Tools/MSVC/14.41.34120"
  kit:
    path: "C:/Program Files (x86)/Windows Kits/10"
    version: "10.0.22621.0"

windows_sdk:
  directory: 
    find_directory: "C:/Program Files (x86)/Windows Kits/10"
  version: '{{ first( windows_sdk/directory/* ) }}'

flags:
  cpp:
    global:
      - /Fm /c /EHsc /Ox /Zi /FS -MT /utf-8 /std:c++20
      - -I"{{components.msvc.tooling.build_tool_path}}/include" 
      - -I"{{components.msvc.tooling.kit.path}}/Include/{{components.msvc.tooling.kit.version}}/um"
      - -I"{{components.msvc.tooling.kit.path}}/Include/{{components.msvc.tooling.kit.version}}/shared" 
      - -I"{{components.msvc.tooling.kit.path}}/Include/{{components.msvc.tooling.kit.version}}/ucrt"
      - -DEBUG:FULL

  ld:
    global:
      - -SUBSYSTEM:CONSOLE
      - -MACHINE:x64
      - -OPT:REF
      - -DEBUG:FULL
      - -OPT:NOICF
      - -LIBPATH:"{{components.msvc.tooling.kit.path}}/Lib/{{components.msvc.tooling.kit.version}}/um/x64"
      - -LIBPATH:"{{components.msvc.tooling.build_tool_path}}/lib/onecore/x64"
      - -LIBPATH:"{{components.msvc.tooling.kit.path}}/Lib/{{components.msvc.tooling.kit.version}}/ucrt/x64"

tools:
  cl: "cl.exe"
  link: "link.exe"

blueprints:
  link:
    depends:
      - '{{project_output}}/{{project_name}}.exe'

  '{{project_output}}/{{project_name}}.exe':
    depends:
      - '[{% for name, component in components %}{%if existsIn(component,"sources") %}{% for source in component.sources %}{{project_output}}/components/{{name}}/{{source}}.o, {% endfor %}{% endif %}{% endfor %}]'
      - '{{project_output}}/{{project_name}}.global_ld_options'
    process:
      - link: "@{{project_output}}/{{project_name}}.global_ld_options -OUT:{{project_output}}/{{project_name}}.exe"

  object_files:
    regex: .+/components/([^/]*)/(.*)\.(cpp|c)\.o
    depends:
      - '{{project_output}}/components/{{$(1)}}/{{$(1)}}.{{$(3)}}_options'
      - '{{at(components, $(1)).directory}}/{{$(2)}}.{{$(3)}}'
      - '{{project_output}}/{{project_name}}.global_{{$(3)}}_options'
    process:
      - create_directory: '{{$(0)}}'
      - cl: "@{{project_output}}/{{project_name}}.global_{{$(3)}}_options @{{project_output}}/components/{{$(1)}}/{{$(1)}}.{{$(3)}}_options -sourceDependencies {{$(0)}}.d.json -Fo:{{$(0)}} {{at(components, $(1)).directory}}/{{$(2)}}.{{$(3)}}"
  
  '{{project_output}}/{{project_name}}.global_ld_options':
    depends:
      - data:
          - '/*/sources'
          - '/*/flags/ld/global'
    process:
      - inja: "-MAP:\"{{project_output}}/{{project_name}}.map\" {% for name,component in components %}{% for flag in component.flags.ld.global %}{{render(flag, component.directory)}} {% endfor %}{% for library in component.libraries %}{{component.directory}}/{{render(library)}} {% endfor %}{%endfor%} -PDB:\"{{project_output}}/{{project_name}}.pdb\" {% for name, component in components %}{%if existsIn(component,\"sources\") %}{% for source in component/sources %}{{project_output}}/components/{{name}}/{{source}}.o {% endfor %}{% endif %}{% endfor %} Shlwapi.lib"
      - save:
    
  global_compiler_options:
    regex: '{{project_output}}/{{project_name}}.global_(cpp|c)_options'
    depends:
      - data:
          - '/*/flags/{{$(1)}}/global'
          - '/*/includes/global'
          - '/*/defines/global'
    process:
      - inja: "{% for name,component in components %}
          {% if existsIn(component, \"flags\") and existsIn(component.flags, $(1)) %}{% for flag in at(component.flags, $(1)).global %}{{render(flag)}} {% endfor %}{%endif%}
          {%- for include in component.includes.global %}-I{{component.directory}}/{{include}} {% endfor %}
          {%- for define in component.defines.global %}-D{{define}} {% endfor %}
          {%endfor%}
          {%- for feature in features %}-D{{feature}}_FEATURE_REQUIRED {% endfor %}
          -I{{project_output}}"
      - save:
      
  compiler_option_files:
    regex: '.+/components/([^/]*)/\1\.(cpp|c)_options'
    depends:
      - data:
          - '/{{$(1)}}/flags/{{$(2)}}/local'
          - '/{{$(1)}}/includes/local'
          - '/{{$(1)}}/defines/local'
    process:
      - create_directory: '{{$(0)}}'
      - inja: "{% set component=at(components,$(1)) %}
          {% if existsIn(component, \"flags\")%}{% for flag in at(component.flags, $(2)).local %}{{render(flag)}} {% endfor %}{%endif%}
          {% for include in component.includes.local %}-I{{component.directory}}/{{include}} {% endfor %}
          {% for define in component.defines.local %}-D{{define}} {% endfor %}"
      - save:
